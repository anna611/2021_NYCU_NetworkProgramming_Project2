#include "np_single_proc.h"

using namespace std;
int CreateServTCP(int port)
{
    int LISTENQ = 0;
    int sockfd = 0;
    struct sockaddr_in sock_addr;
    // open TCP socket
    if((sockfd = socket(AF_INET, SOCK_STREAM, 0))<0)
    {
        cerr << "server: can't open stream socket" << endl;
        return 0;
    }
        
    bzero((char *) &sock_addr, sizeof(sock_addr));
    // set TCP
    sock_addr.sin_family = AF_INET;
    sock_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    sock_addr.sin_port = htons(port);

    // set socket
	int optval = 1;
	if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(int)) == -1) 
    {
		cerr << "Error: set socket failed" << endl;
		return 0;
	}
    // bind socket
	if (bind(sockfd, (struct sockaddr*)&sock_addr, sizeof(sock_addr)) < 0)
    {
		cerr << "Error: bind socket failed" << endl;
        return 0;
	}
	listen(sockfd, LISTENQ);
	return sockfd;
}

int main(int argc, char* argv[]){
    struct sockaddr_in fsin;
    if (argc != 2)
    {
        cerr << "./np_multi_proc [port]" << endl;
        exit(-1);
    }
    int port = atoi(argv[1]);
    int msock = CreateServTCP(port);
    fd_set rfds;
    fd_set afds;
    int nfds = getdtablesize();
    FD_ZERO(&afds);
    FD_SET(msock,&afds);
    //initial used id
    for(int i = 0;i < MAX_CLIENT_SIZE;++i)
        record_id[i] = 0;
    while(1){
        memcpy(&rfds,&afds,sizeof(rfds));
        if(select(nfds,&rfds,(fd_set *)0,(fd_set *)0,(struct timeval *)0) < 0)
            errexit("select: %s\n",strerror(errno));
        if(FD_ISSET(msock,&rfds)){
            int ssock;
            socklen_t alen = sizeof(fsin);
            ssock = accept(msock,(struct sockaddr *)&fsin,&alen);
            if(ssock < 0)
                errexit("accept: %s\n",strerror(errno));
            else{
                client_info new_cli;
                new_cli.fd = ssock;
                //new_cli.id = ;
                new_cli.name = "(no name)";
                //new_cli.ip =    ;
                //new_cli.port =  ;    
               // new_cli.numpipe.clear(); 
                FD_SET(ssock,rfds);
                welcome(new_cli.fd);  
            }
        }
        for(int fd = 0;fd < nfds; ++fd){
            if(fd != msock && FD_ISSET(fd,&rfds)){
                if (echo(fd) == 0) {
                    (void) close(fd);
                    FD_CLR(fd, &afds);
                }
            }
        }

    }
}